# Создайте в переменной data список значений разных типов перечислив их через запятую внутри квадратных скобок. Для каждого элемента в цикле выведите:

# порядковый номер начиная с единицы
# значение
# адрес в памяти
# размер в памяти
# хэш объекта
# результат проверки на целое число только если он положительный
# результат проверки на строку только если он положительный Добавьте в список повторяющиеся элементы и сравните на результаты.

import sys

# Создание списка значений разных типов
data = [5, 3.14, 'Hello', True, [1, 2, 3], {'a': 1, 'b': 2}, (1, 2, 3), None]

# Добавление повторяющихся элементов в список
data.extend([5, 'Hello', None])

# Инициализация счетчика
count = 1

# Перебор элементов списка
for item in data:
    # Вывод информации о элементе
    print(f"Порядковый номер: {count}")
    print(f"Значение: {item}")
    print(f"Адрес в памяти: {id(item)}")
    print(f"Размер в памяти: {sys.getsizeof(item)} байт")
    print(f"Хэш объекта: {hash(item)}")

    # Проверка на целое число
    if isinstance(item, int) and item > 0:
        print("Результат проверки на целое число: Положительное целое число")

    # Проверка на строку
    if isinstance(item, str):
        print("Результат проверки на строку: Это строка")

    print()  # Пустая строка для разделения вывода элементов

    # Увеличение счетчика
    count += 1

# Создайте в переменной data список значений разных типов перечислив их через запятую внутри квадратных скобок. Для каждого элемента в цикле выведите:

# порядковый номер начиная с единицы
# значение
# адрес в памяти
# размер в памяти
# хэш объекта
# результат проверки на целое число только если он положительный
# результат проверки на строку только если он положительный Добавьте в список повторяющиеся элементы и сравните на результаты.

import sys

data = [10, 'hello', 3.14, [1, 2, 3], 'world', True, (4, 5, 6), 10, 'hello']

for index, value in enumerate(data, start=1):
    print(f"Порядковый номер: {index}")
    print(f"Значение: {value}")
    print(f"Адрес в памяти: {id(value)}")
    print(f"Размер в памяти: {sys.getsizeof(value)} байт")
    print(f"Хэш объекта: {hash(value)}")

    if isinstance(value, int) and value > 0:
        print("Проверка на целое число: Положительное целое число")

    if isinstance(value, str) and len(value) > 0:
        print("Проверка на строку: Положительная строка")

    print("--------------------------") #для удобства чтения вывода разделительная строка из знаков -.

# Напишите программу, которая получает целое число и возвращает его двоичное, восьмеричное строковое представление. 
# Функции bin и oct используйте для проверки своегорезультата, а не для решения. 
# Дополнительно: Попробуйте избежать дублирования кода в преобразованиях к разным системам счисления. Избегайте магических чисел. Добавьте аннотацию типов где это возможно

def convert_to_base(num: int, base: int) -> str:
    """
    Функция преобразует число в строковое представление в указанной системе счисления.

    Args:
        num: Целое число для преобразования.
        base: Система счисления (2 для двоичной, 8 для восьмеричной).

    Returns:
        Строковое представление числа в указанной системе счисления.

    """
    if num == 0:
        return '0'  # Возвращаем '0' для нуля

    digits = []
    while num:
        digits.append(str(num % base))
        num //= base

    return ''.join(digits[::-1])


def get_binary_and_octal_string(num: int) -> tuple[str, str]:
    """
    Функция получает целое число и возвращает его двоичное и восьмеричное строковое представление.

    Args:
        num: Целое число для преобразования.

    Returns:
        Кортеж содержащий двоичное и восьмеричное строковое представление числа.

    """
    binary_string = convert_to_base(num, 2)
    octal_string = convert_to_base(num, 8)
    return binary_string, octal_string


# Получаем число от пользователя
num = int(input("Введите целое число: "))

# Получаем двоичное и восьмеричное представление числа
binary, octal = get_binary_and_octal_string(num)

# Выводим результаты
print(f"Двоичное представление числа {num}: {binary}")
print(f"Восьмеричное представление числа {num}: {octal}")



# Напишите программу, которая вычисляет площадь круга и длину окружности по введённому диаметру. Диаметр не превышает 1000 у.е. Точность вычислений должна составлять не менее 42 знаков после запятой.

import math

def calculate_circle_properties(diameter: float) -> tuple[float, float]:
    """
    Функция вычисляет площадь круга и длину окружности по заданному диаметру.

    Args:
        diameter: Диаметр круга.

    Returns:
        Кортеж содержащий площадь круга и длину окружности.

    """
    radius = diameter / 2.0

    # Вычисляем площадь круга
    area = math.pi * radius**2

    # Вычисляем длину окружности
    circumference = 2 * math.pi * radius

    return area, circumference


# Получаем диаметр от пользователя
diameter = float(input("Введите диаметр круга: "))

# Вычисляем площадь круга и длину окружности
area, circumference = calculate_circle_properties(diameter)

# Выводим результаты с точностью до 42 знаков после запятой
print(f"Площадь круга: {area:.42f}")
print(f"Длина окружности: {circumference:.42f}")


# Напишите программу, которая решает квадратные уравнения даже если дискриминант отрицательный. Используйте комплексные числа для извлечения квадратного корня.

import cmath

def solve_quadratic_equation(a: float, b: float, c: float) -> tuple[complex, complex]:
    """
    Функция решает квадратное уравнение вида ax^2 + bx + c = 0.

    Args:
        a: Коэффициент при x^2.
        b: Коэффициент при x.
        c: Свободный член.

    Returns:
        Кортеж с двумя комплексными корнями уравнения.

    """
    # Вычисляем дискриминант
    discriminant = cmath.sqrt(b**2 - 4*a*c)

    # Вычисляем корни уравнения
    root1 = (-b + discriminant) / (2*a)
    root2 = (-b - discriminant) / (2*a)

    return root1, root2


# Получаем коэффициенты от пользователя
a = float(input("Введите коэффициент a: "))
b = float(input("Введите коэффициент b: "))
c = float(input("Введите свободный член c: "))

# Решаем квадратное уравнение
root1, root2 = solve_quadratic_equation(a, b, c)

# Выводим результаты
print(f"Первый корень: {root1}")
print(f"Второй корень: {root2}")


# Напишите программу банкомат.

# Начальная сумма равна нулю
# Допустимые действия: пополнить, снять, выйти
# Сумма пополнения и снятия кратны 50 у.е.
# Процент за снятие — 1.5% от суммы снятия, но не менее 30 и не более 600 у.е.
# После каждой третей операции пополнения или снятия начисляются проценты - 3%
# Нельзя снять больше, чем на счёте
# При превышении суммы в 5 млн, вычитать налог на богатство 10% перед каждой операцией, даже ошибочной
# Любое действие выводит сумму денег

def calculate_withdrawal_fee(amount: float) -> float:
    """
    Функция вычисляет комиссию за снятие денег.

    Args:
        amount: Сумма снятия.

    Returns:
        Комиссия за снятие денег.

    """
    withdrawal_fee = amount * 0.015  # 1.5% от суммы снятия
    withdrawal_fee = max(withdrawal_fee, 30)  # не менее 30 у.е.
    withdrawal_fee = min(withdrawal_fee, 600)  # не более 600 у.е.
    return withdrawal_fee


def calculate_interest(amount: float) -> float:
    """
    Функция вычисляет проценты за снятие или пополнение денег.

    Args:
        amount: Сумма операции.

    Returns:
        Проценты за операцию.

    """
    interest = amount * 0.03  # 3% от суммы операции
    return interest


def bank_atm():
    """
    Функция реализует работу банкомата.

    """
    balance = 0  # Начальная сумма на счету
    transaction_count = 0  # Счетчик операций

    while True:
        action = input("Выберите действие (пополнить, снять, выйти): ")

        if action == "пополнить":
            amount = float(input("Введите сумму пополнения: "))

            if balance >= 5000000:
                amount -= amount * 0.1  # Вычитаем налог на богатство 10%

            transaction_count += 1

            if transaction_count % 3 == 0:
                interest = calculate_interest(amount)
                balance += amount + interest
            else:
                balance += amount

        elif action == "снять":
            amount = float(input("Введите сумму снятия: "))

            if balance >= 5000000:
                amount -= amount * 0.1  # Вычитаем налог на богатство 10%

            withdrawal_fee = calculate_withdrawal_fee(amount)
            transaction_count += 1

            if transaction_count % 3 == 0:
                interest = calculate_interest(amount)
                balance -= (amount + withdrawal_fee + interest)
            else:
                balance -= (amount + withdrawal_fee)

            balance = max(balance, 0)  # Нельзя снять больше, чем на счету

        elif action == "выйти":
            break

        print(f"Сумма на счету: {balance} у.е.")


# Запускаем банкомат
bank_atm()


# Напишите программу, которая получает целое число и возвращает его шестнадцатеричное строковое представление. Функцию hex используйте для проверки своего результата.
def decimal_to_hexadecimal(number: int) -> str:
    """
    Функция преобразует целое число в его шестнадцатеричное представление.

    Args:
        number: Целое число.

    Returns:
        Шестнадцатеричное представление числа.

    """
    hexadecimal = hex(number)[2:]  # Вызываем встроенную функцию hex и убираем префикс "0x"
    return hexadecimal


# Получаем целое число от пользователя
number = int(input("Введите целое число: "))

# Преобразуем число в шестнадцатеричное представление
hexadecimal = decimal_to_hexadecimal(number)

# Выводим результаты
print(f"Шестнадцатеричное представление числа: {hexadecimal}")
print(f"Проверка с использованием встроенной функции hex: {hex(number)}")


# Напишите программу, которая принимает две строки вида “a/b” - дробь с числителем и знаменателем. Программа должна возвращать сумму и произведение* дробей. Для проверки своего кода используйте модуль fractions.
# Пример:
# Ввод:
# 1/2
# 1/3
# Вывод:
# 5/6 1/6

from fractions import Fraction

def perform_fraction_operations(fraction1: str, fraction2: str) -> tuple[str, str]:
    """
    Функция выполняет операции с дробями: сложение и умножение.

    Args:
        fraction1: Первая дробь в виде строки "a/b".
        fraction2: Вторая дробь в виде строки "a/b".

    Returns:
        Сумма и произведение дробей в виде строк.

    """
    # Преобразуем строки в объекты Fraction
    fraction1 = Fraction(fraction1)
    fraction2 = Fraction(fraction2)

    # Выполняем операции
    sum_fraction = fraction1 + fraction2
    product_fraction = fraction1 * fraction2

    # Возвращаем результаты в виде строк
    return str(sum_fraction), str(product_fraction)


# Получаем дроби от пользователя
fraction1 = input("Введите первую дробь в виде 'a/b': ")
fraction2 = input("Введите вторую дробь в виде 'a/b': ")

# Выполняем операции с дробями
sum_result, product_result = perform_fraction_operations(fraction1, fraction2)

# Выводим результаты
print(f"Сумма дробей: {sum_result}")
print(f"Произведение дробей: {product_result}")

